------------------------------ CHECK SESSION ------------------------------
    import glob
    import os

    features_path = f'../features'
    labels_path = f'../dataset/labels.csv'

    labels = pd.read_csv(labels_path)
    labels_session = list(labels.filename.values)
    print('labels_session.size =', len(labels_session))

    test_session = {}
    data_path = os.path.join(features_path, 'test_features')
    for user in glob.glob(os.path.join(data_path, 'user*')):
        user_name = os.path.basename(user)
        test_session[user_name] = [os.path.basename(session)
                                   for session in glob.glob(os.path.join(user, 'session*'))]
    print('test_session.size =', sum([len(v) for v in test_session.values()]))

    TP, TN, FP = [], [], []
    for user, user_sessions in test_session.items():
        for u_session in user_sessions:
            if u_session in labels_session:
                TP.append(u_session)
                indx = labels_session.index(u_session)
                del labels_session[indx]
            else:
                TN.append(u_session)
    FP = labels_session
    print('TP.size =', len(TP))
    print('TN.size =', len(TN))
    print('FP.size =', len(FP))
------------------------------------------------------------------------


-------------------------------- FIT -----------------------------------
param_grid_svm = ParameterGrid(param_grid={
    'kernel': ['rbf'],
    'nu': np.linspace(0.3, 0.05, 6),
    'gamma': [1e-5, 1e-4],
})  # 1 * 6 * 2 = 12
print(f">>> train.score: {train_score:.4f}, "
      f"auc = {auc:.4f}, "
      f"nu: {param['nu']:.2f}, "
      f"gamma: {param['gamma']}",
      COLOR['None'])
print(COLOR['red'],
      f'>>> train.score: {best_param[1]:.4f}, '
      f"auc = {best_param[2]:.4f}, "
      f"nu: {best_param[4]:.2f}, "
      f"gamma: {best_param[5]}",
      COLOR['None'], sep='')
best_param = (model, train_score, auc, param['kernel'], param['nu'], param['gamma'])

param_grid_if = ParameterGrid(param_grid={
    'n_estimators': [100],
    'max_samples': [1.0, 0.9],
    'contamination': ['auto', 0.05],
    'max_features': [1.0, 0.9],
    'bootstrap': [True, False],
    'behaviour': ['deprecated']
})  # 1 * 2 * 2 * 2 * 2 * 1 = 16
print(f">>> train.score: {train_score:.4f}, "
      f"auc = {auc:.4f}, "
      f"n_estimators: {param['n_estimators']}, "
      f"max_samples: {param['max_samples']}, "
      f"contamination: {param['contamination']}, "
      f"max_features: {param['max_features']}, "
      f"bootstrap: {param['bootstrap']}",
      COLOR['None'])
print(COLOR['red'],
      f">>> train.score: {best_param[1]:.4f}, "
      f"auc = {best_param[2]:.4f}, "
      f"n_estimators: {best_param[3]}, "
      f"max_samples: {best_param[4]}, "
      f"contamination: {best_param[5]}, "
      f"max_features: {best_param[6]}, "
      f"bootstrap: {best_param[7]}, ",
      COLOR['None'], sep='')
best_param = (model, train_score, auc, param['n_estimators'], param['max_samples'],
              param['contamination'], param['max_features'], param['bootstrap'])

param_grid = ParameterGrid(param_grid={
    'store_precision': [True, False],
    'assume_centered': [False],
    'support_fraction': [1.],
    'contamination': [0.1, 0.05],
})  # 2 * 1 * 1 * 2 = 4
print(f">>> train.score: {train_score:.4f}, "
      f"auc = {auc:.4f}, "
      f"store_precision: {param['store_precision']}, "
      f"assume_centered: {param['assume_centered']}, "
      f"support_fraction: {param['support_fraction']}, "
      f"contamination: {param['contamination']}, ",
      COLOR['None'])
print(COLOR['red'],
      f">>> train.score: {best_param[1]:.4f}, "
      f"auc = {best_param[2]:.4f}, "
      f"store_precision: {best_param[3]}, "
      f"assume_centered: {best_param[4]}, "
      f"support_fractionfloat: {best_param[5]}, "
      f"contamination: {best_param[6]}, ",
      COLOR['None'], sep='')
best_param = (model, train_score, auc, param['store_precision'], param['assume_centered'],
              param['support_fraction'], param['contamination'])

------------------------------------------------------------------------
